## 15.1 var 키워드로 선언한 변수의 문제점
ES5까지 변수를 선언할 수 있는 유일한 방법은 var 키워드를 사용하는 것이었다. 하지만 몇가지 문제가 발생할 수 있다.

### 15.1.1 변수 중복 선언 허용
var 키워드로 선언한 변수는 중복 선언이 가능하다.
```javascript
var x = 1;
var y = 1;
// var 키워드로 선언된 변수는 같은 스코프 내에서 중복 선언을 허용
// 초기화문이 있는 변수 선언문은 자바스크립트 엔진에 의해 var 키워드가 없는 것처럼 동작
var x = 100;

// 초기화문이 없는 변수 선언문은 무시됨, 에러 발생은 일어나지 않음
var y;

console.log(x); // 100
console.log(y); // 1
```

x와 y 변수는 중복 선언되었다. 의도치 않게 먼저 선언된 변수 값이 변경되는 부작용이 발생한다.

### 15.1.2 함수 레벨 스코프
var 키워드로 선언한 변수는 오로지 함수의 코드 블록만을 지역 스코프로 인정한다. 따라서 함수 외부에서 var 키워드로 선언한 변수는 코드 블록 내에서 선언해도 모두 전역 변수가 된다.
```javascript
var x = 1;

if(true) {
  // x는 전역변수다. 이미 선언된 전역 변수 x가 있으므로 중복 선언된다.
  // 이는 의도치 않게 변수값이 변경되는 부작용을 발생시킨다.
  var x = 10;
}
console.log(x); // 10
```
```javascript
var i = 10;

// for문에서 선언한 i는 전역 변수다.
for(var i = 0; i < 5; i++) {
  console.log(i); // 0 1 2 3 4
}
console.log(i); // 5
```
함수 레벨 스코프는 전역 변수를 남발할 가능성을 높인다. 이로 인해 의도치 않게 전역 변수가 중복 선언되는 경우가 발생한다.

### 15.1.3 변수 호이스팅
var 키워드로 변수를 선언하면 변수 호이스팅에 의해 변수 선언문이 스코프의 선두로 끌어 올려진 것처럼 동작한다. 즉, 변수 선언문 이전에 참조할 수 있게 된다. 단, 할당문 이전에 참조하면 언제나 undefined를 반환한다.

```javascript
// 이 시점에는 변수 호이스팅에 의해 이미 foo 변수가 선언되었다. (1. 선언단계)
// 변수 foo는 undefined로 초기화된다. (2. 초기화단계)
console.log(foo); // undefined

// 변수에 값을 할당 (3. 할당단계)
foo = 123;

console.log(foo); // 123

// 변수 선언은 런타임 이전에 자바스크립트 엔진에 의해 암묵적으로 실행된다.
var foo;
```
이는 에러를 발생시키지는 않지만 프로그램의 흐름에 어긋날뿐더러 가독성을 떨어뜨리고 오류 발생의 가능성이 있다.

---

## 15.2 let 키워드
앞서 본 var 키워드의 단점을 보완하기 위해 ES6부터 새로운 변수 선언 키워드인 let, const를 도입했다. 
let 키워드 먼저 살펴보자.

### 15.2.1 변수 중복 선언 금지
let 키워드로 이름이 같은 변수를 중복 선언하면 문법 에러가 발생한다.
```javascript
var foo = 123;
// var 키워드로 선언된 변수는 같은 스코프 내에서 중복 선언을 허용한다.
// 아래 변수 선언문은 자바스크립트 엔진에 의해 var 키워드가 없는 것처럼 동작한다.

var foo = 456;

let bar = 123;
// let이나 const 키워드로 선언된 변수는 같은 스코프 내에서 중복 선언을 허용하지 않는다.
let bar = 456; // SyntaxError
```

### 15.2.2 블록 레벨 스코프
let 키워드로 선언한 변수는 var 키워드와 다르게 모든 코드 블록(ir, for, while, try/catch, 함수)을 지역 스코프로 인정하는 **블록 레벨 스코프**를 따른다.

```javascript
let foo = 1; // 전역 변수

{
  let foo = 2; // 지역 변수
  let bar = 3; // 지역 변수
}

console.log(foo); // 1
console.log(bar); // ReferenceError
```

let 키워드로 선언된 변수는 블록 레벨 스코프를 따른다. foo 변수와 bar 변수는 지역 변수이므로 전역에서는 참조할 수 없다.
함수도 코드 블록이므로 스코프를 만든다. 이때 함수 내의 코드 블록은 함수 레벨 스코프에 중첩된다.

### 15.2.3 변수 호이스팅
let 키워드로 선언한 변수는 변수 호이스팅이 발생하지 않는 것처럼 동작한다.
```javascript
console.log(foo); //ReferenceError
let foo;
```
이처럼 let 키워드로 선언한 변수를 변수 선언문 이전에 참조하면 참조 에러가 발생한다. 
var 키워드는 런타임 이전에 자바스크립트 엔진에 의해 선언 단계와 초기화 단계가 한번에 진행된다. 즉, 선언 단계에서 스코프(실행 컨테스트의 렉시컬 환경)에 변수 식별자를 등록해 자바스크립트 엔진에 변수의 존재를 알린다.

**let 키워드로 선언한 변수는 선언 단계와 초기화 단계가 분리되어 진행된다.** 즉, 런타임 이전에 자바스크립트 엔진에 의해 암묵적으로 선언 단계가 먼저 실행되지만 초기화 단계는 변수 선언문에 도달했을 때 실행된다.

초기화 단계가 실행되기 이전에 변수에 접근하려고 하면 참조 에러가 발생한다. 스코프의 시작 지점부터 초기화 단계 시작 지점(변수 선언문)까지 변수를 참조할 수 없다. 이 구간을 **일시적 사각지대(TDZ)**라고 부른다.

```javascript
// 런타임 이전에 선언 단계가 실행된다. 아직 변수가 초기화되지 않았다.
// 초기화 이전의 일시적 사각지대에서는 변수를 참조할 수 없다.

console.log(foo); // ReferenceError

let foo; // 변수 선언문에서 초기화 단계가 실행된다.
console.log(foo); // undefined

foo = 1; // 할당문에서 할당 단계가 실행된다.
console.log(foo); // 1
```
결국 let 키워드로 선언한 변수는 변수 호이스팅이 발생하지 않는 것처럼 보인다. 하지만 그렇지 않다.
```javascript
let foo = 1; // 전역 변수

{
  console.log(foo); // ReferenceError
  let foo = 2; // 지역 변수
}
```
변수 호이스팅이 일어나지 않는다면 전역변수의 값이 출력되어야 하지만 호이스팅이 발생하기 때문에 참조 에러가 난다.

### 15.2.4 전역 객체와 let
var 키워드로 선언한 전역 변수와 전역 함수, 그리고 선언하지 않은 변수에 값을 할당한 암묵적 전역은 전역 객체 window의 프로퍼티가 된다. 전역 객체의 프로퍼티를 참조할 때 window를 생략할 수 있다.

하지만, let 키워드로 선언한 전역 변수는 전역 객체의 프로퍼티가 아니다. 즉 window.foo와 같이 접근할 수 없다. let 전역 변수는 보이지 않는 개념적인 블록 내에 존재하게 된다.

---
## 15.3 const 키워드
const 키워드는 상수를 선언하기 위해 사용한다. const 키워드의 특징은 let 키워드와 대부분 동일하므로 let 키워드와 다른 점을 중심으로 살펴보자.

### 15.3.1 선언과 초기화
**const 키워드로 선언한 변수는 반드시 선언과 동시에 초기화해야 한다.**
```javascript
const foo = 1; 

const foo; // SyntaxError
```

const 키워드로 선언한 변수는 let 키워드로 선언한 변수와 마찬가지로 블록 레벨 스코프를 가지면, 변수 호이스팅이 발생하지 않는 것처럼 동작한다.

```javascript
{
  // 변수 호이스팅이 발생하지 않는 것처럼 동작한다.
  console.log(foo); //ReferenceError
  const foo = 1;
  console.log(foo); // 1
}

// 블록 레벨 스코프
console.log(foo); // ReferenceError
```

### 15.3.2 재할당 금지
**const 키워드로 선언한 변수는 재할당이 금지된다.**
```javascript
const foo = 1;
foo = 2; // TypeError
```

### 15.3.3 상수
const 키워드로 선언한 변수에 원시 값을 할당한 경우 변수 값을 변경할 수 없다. 원시 값은 변경 불가능한 값이므로 재할당 없이 값을 변경할 수 있는 방법이 없기 때문이다. const 키워드를 상수를 표현하는데 사용한다.

**상수는 재할당이 금지된 변수를 말한다. const 키워드로 선언된 변수에 원시 값을 할당한 경우 원시 값은 변경할 수 없는 값이고 const 키워드에 의해 재할당이 금지되므로 할당된 값을 변경할 수 있는 방법은 없다.**

일반적으로 상수의 이름은 대문자로 선언하고, 여러 단어로 이뤄진 경우네는 언더스코어로 구분하여 스네이크 케이스로 표현한다.
```javascript
const TAX_RATE = 0.1;

let preTaxPrice = 100;

let afterTaxPrice = preTaxPrice + (preTaxPrice * TAX_RATE);
console.log(afterTaxPrice); // 110
```

### 15.3.4 const 키워드와 객체
원시 값과 달리 **const 키워드로 선언된 변수에 객체를 할당한 경우 값을 변경할 수 있다.** 변경 가능한 값인 객체는 재할당 없이도 직접 변경이 가능하기 때문이다.

```javascript
const person = {
  name: 'Lee'
};

person.name = 'Kim';

console.log(person); // {name: "Kim"}
```
**const 키워드는 재할당을 금지할 뿐 "불변"을 의미하지 않는다.** 다시 말해, 새로운 값을 재할당하는 것은 불가능하지만 프로퍼티 동적 생성, 삭제, 프로퍼티 값의 변경을 통해 객체를 변경하는 것은 가능하다.

---

## 15.4 var vs. let vs. const
변수 선언에는 기본적으로 const를 사용하고 let은 재할당이 필요한 경우에 한정해 사용하는 것이 좋다.

- ES6을 사용한다면 var 키워드는 사용하지 않는다.
- 재할당이 필요한 경우에 한정해 let 키워드를 사용한다. 이때 변수의 스코프는 최대한 좁게 한다.
- 변경이 발생하지 않고 읽기 전용으로 사용하는 원시 값과 객체에는 const 키워드를 사용한다. const 키워드는 재할당이 금지되므로 var, let보다 안전하다.

